{% schema %}
{
  "name": "Custom Products",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Featured Products"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Our most popular items this season"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Products to show"
    }
  ],
  "presets": [
    {
      "name": "Custom Products",
      "category": "Custom Sections"
    }
  ]
}
{% endschema %}

<div class="custom-products">
  <div class="custom-products__header">
    {% if section.settings.heading != blank %}
      <h2 class="custom-products__heading">{{ section.settings.heading }}</h2>
    {% endif %}

    {% if section.settings.subheading != blank %}
      <p class="custom-products__subheading">{{ section.settings.subheading }}</p>
    {% endif %}
  </div>

  <div class="custom-products__grid">
    {% if section.settings.collection != blank %}
      {% assign collection = collections[section.settings.collection] %}
      {% assign product_limit = section.settings.products_to_show %}

      {% for product in collection.products limit: product_limit %}
        <div class="product-card" data-product-id="{{ product.id }}">
          <div class="product-card__image-wrapper">
            <a href="{{ product.url }}" class="product-card__link">
              {% if product.featured_image != blank %}
                <img
                  src="{{ product.featured_image | img_url: '400x' }}"
                  alt="{{ product.featured_image.alt | escape }}"
                  class="product-card__image"
                  loading="lazy"
                >
              {% else %}
                {{ 'product-1' | placeholder_svg_tag: 'product-card__image placeholder-svg' }}
              {% endif %}
            </a>
          </div>

          <div class="product-card__info">
            <h3 class="product-card__title">
              <a href="{{ product.url }}">{{ product.title }}</a>
            </h3>

            <div class="product-card__price">
              {% if product.compare_at_price > product.price %}
                <span class="product-card__price-item product-card__price--sale">{{ product.price | money }}</span>
                <span class="product-card__price-item product-card__price--compare">
                  {{- product.compare_at_price | money -}}
                </span>
              {% else %}
                <span class="product-card__price-item">{{ product.price | money }}</span>
              {% endif %}
            </div>

            <button
              class="product-card__add-to-cart"
              data-product-id="{{ product.id }}"
              data-product-title="{{ product.title | escape }}"
              data-product-handle="{{ product.handle }}"
              data-product-url="{{ product.url }}"
              data-product-price="{{ product.price | money }}"
              data-product-image="{{ product.featured_image | img_url: '120x' }}"
              data-has-variants="{% if product.has_only_default_variant %}false{% else %}true{% endif %}"
            >
              Add to Cart
            </button>
          </div>
        </div>
      {% endfor %}
    {% else %}
      <p class="custom-products__empty">Please select a collection</p>
    {% endif %}
  </div>
</div>

<!-- Add to Cart Popup -->
<div id="add-to-cart-popup" class="add-to-cart-popup">
  <div class="add-to-cart-popup__content">
    <button class="add-to-cart-popup__close" id="close-popup">&times;</button>

    <div class="add-to-cart-popup__header">
      <h3 class="add-to-cart-popup__title">Add to Cart</h3>
    </div>

    <div class="add-to-cart-popup__product-info">
      <div class="add-to-cart-popup__image-container">
        <img src="" alt="" class="add-to-cart-popup__image" id="popup-product-image">
      </div>

      <div class="add-to-cart-popup__details">
        <h4 class="add-to-cart-popup__product-title" id="popup-product-title"></h4>
        <p class="add-to-cart-popup__product-price" id="popup-product-price"></p>
      </div>
    </div>

    <div id="popup-variants-container" class="add-to-cart-popup__variants">
      <!-- Variants will be dynamically inserted here -->
    </div>

    <div class="add-to-cart-popup__quantity">
      <label for="popup-quantity">Quantity:</label>
      <div class="add-to-cart-popup__quantity-selector">
        <button class="add-to-cart-popup__quantity-btn" id="decrease-quantity">-</button>
        <input type="number" id="popup-quantity" min="1" value="1" class="add-to-cart-popup__quantity-input">
        <button class="add-to-cart-popup__quantity-btn" id="increase-quantity">+</button>
      </div>
    </div>

    <div class="add-to-cart-popup__footer">
      <button class="add-to-cart-popup__submit" id="add-to-cart-submit">Add to Cart</button>
      <a href="" class="add-to-cart-popup__view-product" id="popup-product-link">View Full Details</a>
    </div>
  </div>
</div>

<style>
  .custom-products {
    padding: 60px 20px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .custom-products__header {
    text-align: center;
    margin-bottom: 40px;
  }

  .custom-products__heading {
    font-size: 32px;
    margin-bottom: 10px;
  }

  .custom-products__subheading {
    font-size: 16px;
    color: #777;
    max-width: 600px;
    margin: 0 auto;
  }

  .custom-products__grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 30px;
  }

  .product-card {
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background-color: #fff;
  }

  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .product-card__image-wrapper {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
  }

  .product-card__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .product-card:hover .product-card__image {
    transform: scale(1.05);
  }

  .product-card__info {
    padding: 20px;
  }

  .product-card__title {
    font-size: 16px;
    margin-bottom: 10px;
    font-weight: 500;
  }

  .product-card__title a {
    color: inherit;
    text-decoration: none;
  }

  .product-card__price {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 15px;
  }

  .product-card__price-item {
    font-weight: 500;
  }

  .product-card__price--sale {
    color: #e74c3c;
  }

  .product-card__price--compare {
    text-decoration: line-through;
    font-size: 14px;
    color: #999;
  }

  .product-card__add-to-cart {
    width: 100%;
    padding: 10px;
    background-color: #333;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .product-card__add-to-cart:hover {
    background-color: #555;
  }

  /* Add to Cart Popup */
  .add-to-cart-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .add-to-cart-popup.active {
    opacity: 1;
    visibility: visible;
  }

  .add-to-cart-popup__content {
    background-color: #fff;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    padding: 30px;
    position: relative;
    transform: translateY(20px);
    transition: transform 0.3s ease;
  }

  .add-to-cart-popup.active .add-to-cart-popup__content {
    transform: translateY(0);
  }

  .add-to-cart-popup__close {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 24px;
    background: none;
    border: none;
    cursor: pointer;
    color: #777;
  }

  .add-to-cart-popup__header {
    margin-bottom: 20px;
  }

  .add-to-cart-popup__title {
    font-size: 20px;
    font-weight: 600;
  }

  .add-to-cart-popup__product-info {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #eee;
  }

  .add-to-cart-popup__image-container {
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
    margin-right: 15px;
  }

  .add-to-cart-popup__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .add-to-cart-popup__details {
    flex: 1;
  }

  .add-to-cart-popup__product-title {
    font-size: 16px;
    margin-bottom: 5px;
  }

  .add-to-cart-popup__product-price {
    font-weight: 500;
  }

  .add-to-cart-popup__variants {
    margin-bottom: 20px;
  }

  .variant-selector {
    margin-bottom: 15px;
  }

  .variant-selector__label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
  }

  .variant-selector__select {
    width: 100%;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }

  .add-to-cart-popup__quantity {
    margin-bottom: 25px;
  }

  .add-to-cart-popup__quantity label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
  }

  .add-to-cart-popup__quantity-selector {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
    width: fit-content;
  }

  .add-to-cart-popup__quantity-btn {
    width: 40px;
    height: 40px;
    background: #f5f5f5;
    border: none;
    font-size: 18px;
    cursor: pointer;
  }

  .add-to-cart-popup__quantity-input {
    width: 60px;
    height: 40px;
    border: none;
    text-align: center;
    font-size: 16px;
  }

  .add-to-cart-popup__quantity-input::-webkit-inner-spin-button,
  .add-to-cart-popup__quantity-input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .add-to-cart-popup__footer {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .add-to-cart-popup__submit {
    padding: 12px;
    background-color: #333;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .add-to-cart-popup__submit:hover {
    background-color: #555;
  }

  .add-to-cart-popup__view-product {
    text-align: center;
    color: #333;
    text-decoration: none;
  }

  @media screen and (max-width: 991px) {
    .custom-products__grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media screen and (max-width: 767px) {
    .custom-products__grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media screen and (max-width: 479px) {
    .custom-products__grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const addToCartButtons = document.querySelectorAll('.product-card__add-to-cart');
    const popup = document.getElementById('add-to-cart-popup');
    const closePopupButton = document.getElementById('close-popup');
    const popupProductTitle = document.getElementById('popup-product-title');
    const popupProductPrice = document.getElementById('popup-product-price');
    const popupProductImage = document.getElementById('popup-product-image');
    const popupProductLink = document.getElementById('popup-product-link');
    const popupVariantsContainer = document.getElementById('popup-variants-container');
    const quantityInput = document.getElementById('popup-quantity');
    const decreaseQuantityButton = document.getElementById('decrease-quantity');
    const increaseQuantityButton = document.getElementById('increase-quantity');
    const addToCartSubmitButton = document.getElementById('add-to-cart-submit');
    
    // Currently selected product data
    let currentProductData = {};
    
    // Add to cart button click handler
    addToCartButtons.forEach(button => {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        
        // Store product data
        currentProductData = {
          id: this.getAttribute('data-product-id'),
          title: this.getAttribute('data-product-title'),
          handle: this.getAttribute('data-product-handle'),
          url: this.getAttribute('data-product-url'),
          price: this.getAttribute('data-product-price'),
          image: this.getAttribute('data-product-image'),
          hasVariants: this.getAttribute('data-has-variants') === 'true'
        };
        
        // Populate popup
        popupProductTitle.textContent = currentProductData.title;
        popupProductPrice.textContent = currentProductData.price;
        popupProductImage.src = currentProductData.image;
        popupProductImage.alt = currentProductData.title;
        popupProductLink.href = currentProductData.url;
        
        // Reset quantity
        quantityInput.value = 1;
        
        // Get variants if available
        if (currentProductData.hasVariants) {
          fetchProductVariants(currentProductData.handle);
        } else {
          popupVariantsContainer.innerHTML = '';
        }
        
        // Show popup
        popup.classList.add('active');
        document.body.style.overflow = 'hidden';
      });
    });
    
    // Close popup
    closePopupButton.addEventListener('click', function() {
      popup.classList.remove('active');
      document.body.style.overflow = '';
    });
    
    // Close popup when clicking outside
    popup.addEventListener('click', function(event) {
      if (event.target === popup) {
        popup.classList.remove('active');
        document.body.style.overflow = '';
      }
    });
    
    // Quantity controls
    decreaseQuantityButton.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });
    
    increaseQuantityButton.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      quantityInput.value = currentValue + 1;
    });
    
    // Prevent invalid input for quantity
    quantityInput.addEventListener('input', function() {
      const value = parseInt(this.value);
      if (isNaN(value) || value < 1) {
        this.value = 1;
      }
    });
    
    // Add to cart submission
    addToCartSubmitButton.addEventListener('click', function() {
      // Collect form data
      const quantity = parseInt(quantityInput.value);
      let variantId = currentProductData.id;
      let properties = {};
      
      // Get selected variant if exists
      const variantSelects = document.querySelectorAll('.variant-selector__select');
      if (variantSelects.length > 0) {
        const selectedVariantId = document.getElementById('selected_variant_id');
        if (selectedVariantId && selectedVariantId.value) {
          variantId = selectedVariantId.value;
        }
      }
      
      // Add to cart via AJAX
      addToCart(variantId, quantity, properties);
    });
    
    // Fetch product variants
    function fetchProductVariants(productHandle) {
      fetch(`/products/${productHandle}.js`)
        .then(response => response.json())
        .then(data => {
          renderVariants(data);
        })
        .catch(error => {
          console.error('Error fetching product data:', error);
          popupVariantsContainer.innerHTML = '<p class="error-message">Error loading product options</p>';
        });
    }
    
    // Render variant selectors
    function renderVariants(productData) {
      popupVariantsContainer.innerHTML = '';
      
      // If only default variant, no need for selectors
      if (productData.variants.length === 1 && !productData.options[0].values.length > 1) {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.id = 'selected_variant_id';
        input.value = productData.variants[0].id;
        popupVariantsContainer.appendChild(input);
        return;
      }
      
      // Create variant selectors for each option
      const variantSelectors = [];
      productData.options.forEach((option, optionIndex) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'variant-selector';
        
        const label = document.createElement('label');
        label.className = 'variant-selector__label';
        label.textContent = option.name;
        label.setAttribute('for', `option-${optionIndex}`);
        
        const select = document.createElement('select');
        select.className = 'variant-selector__select';
        select.id = `option-${optionIndex}`;
        select.setAttribute('data-option-index', optionIndex);
        
        option.values.forEach(value => {
          const optionElement = document.createElement('option');
          optionElement.value = value;
          optionElement.textContent = value;
          select.appendChild(optionElement);
        });
        
        wrapper.appendChild(label);
        wrapper.appendChild(select);
        popupVariantsContainer.appendChild(wrapper);
        
        variantSelectors.push(select);
      });
      
      // Hidden input for selected variant ID
      const variantIdInput = document.createElement('input');
      variantIdInput.type = 'hidden';
      variantIdInput.id = 'selected_variant_id';
      variantIdInput.value = productData.variants[0].id;
      popupVariantsContainer.appendChild(variantIdInput);
      
      // Update variant ID when selections change
      variantSelectors.forEach(select => {
        select.addEventListener('change', () => {
          updateSelectedVariant(productData, variantSelectors);
        });
      });
    }
    
    // Update selected variant based on option selections
    function updateSelectedVariant(productData, selectors) {
      // Get current selections
      const selections = [];
      selectors.forEach(select => {
        selections[parseInt(select.getAttribute('data-option-index'))] = select.value;
      });
      
      // Find matching variant
      const matchedVariant = productData.variants.find(variant => {
        return variant.options.every((option, index) => option === selections[index]);
      });
      
      // Update variant ID
      const variantIdInput = document.getElementById('selected_variant_id');
      if (matchedVariant) {
        variantIdInput.value = matchedVariant.id;
        
        // Update price if different from current
        if (matchedVariant.price !== productData.price) {
          const formattedPrice = formatMoney(matchedVariant.price);
          popupProductPrice.textContent = formattedPrice;
        }
      }
    }
    
    // Add to cart via AJAX
    function addToCart(variantId, quantity, properties) {
      const data = {
        items: [{
          id: variantId,
          quantity: quantity,
          properties: properties
        }]
      };
      
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(result => {
        // Close popup
        popup.classList.remove('active');
        document.body.style.overflow = '';
        
        // Show success message
        showNotification('Product added to cart!', 'success');
        
        // Update cart count
        updateCartCount();
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        showNotification('Error adding product to cart. Please try again.', 'error');
      });
    }
    
    // Update cart count
    function updateCartCount() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          // If there's a cart counter in the theme, update it
          const cartCountElements = document.querySelectorAll('.cart-count');
          if (cartCountElements.length > 0) {
            cartCountElements.forEach(element => {
              element.textContent = cart.item_count;
            });
          }
        });
    }
    
    // Format money (simplified)
    function formatMoney(cents) {
      const dollars = cents / 100;
      return '$' + dollars.toFixed(2);
    }
    
    // Show notification
    function showNotification(message, type) {
      const notification = document.createElement('div');
      notification.className = `notification notification--${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.classList.add('notification--visible');
      }, 10);
      
      setTimeout(() => {
        notification.classList.remove('notification--visible');
        setTimeout(() => {
          notification.remove();
        }, 300);
      }, 3000);
    }
    
    // Create notification styles
    const notificationStyles = document.createElement('style');
    notificationStyles.textContent = `
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 4px;
        color: white;
        font-weight: 500;
        opacity: 0;
        transform: translateY(-10px);
        transition: opacity 0.3s ease, transform 0.3s ease;
        z-index: 1100;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        max-width: 300px;
      }
      
      .notification--visible {
        opacity: 1;
        transform: translateY(0);
      }
      
      .notification--success {
        background-color: #2ecc71;
      }
      
      .notification--error {
        background-color: #e74c3c;
      }
    `;
    document.head.appendChild(notificationStyles);
  });
</script>
